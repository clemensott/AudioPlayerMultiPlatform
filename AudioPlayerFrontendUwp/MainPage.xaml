<Page
    x:Class="AudioPlayerFrontend.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AudioPlayerFrontend"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ctl="using:StdOttUwp.Controls"
    xmlns:com="using:AudioPlayerBackend.Player"
    xmlns:con="using:StdOttUwp.Converters"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

    <Page.Resources>
        <local:VolumeToolTipConverter x:Key="volTooTipCon"/>

        <com:PlaybackState x:Key="playingState">Playing</com:PlaybackState>
        <Symbol x:Key="playSym">Play</Symbol>
        <Symbol x:Key="pauseSym">Pause</Symbol>
        <con:IsValueToTwoValueConverter x:Key="isPlayPauseIconCon"
                                        CompareValue="Playing" DecideType="Enum"
                                        EqualsValue="{StaticResource pauseSym}"
                                        NotEqualsValue="{StaticResource playSym}"/>
        <con:IsValueToTwoValueConverter x:Key="isPlayPauseLabelCon"
                                        CompareValue="Playing" DecideType="Enum"
                                        EqualsValue="Pause"
                                        NotEqualsValue="Play"/>

        <con:VisibleCollapsedConverter x:Key="visCon" />
        <con:CollapsedVisibleConverter x:Key="hidCon" />
        <con:FalsyConverter x:Key="invertCon"/>

        <local:LoopIconConverter x:Key="loopIcoCon" />
        <local:OrderIconConverter x:Key="shuffleIcoCon" />

        <x:Int32 x:Key="negativeOne">-1</x:Int32>
        <Visibility x:Key="collapsed">Collapsed</Visibility>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <con:SingleInputConverter x:Name="sicIsUpdating" Output="{Binding IsUpdatingPlaylists}"/>
        <con:SingleInputConverter x:Name="sicIsClient" Output="{Binding IsClient}"/>

        <Grid Visibility="{Binding Path=Playlists.Count,Converter={StaticResource visCon}}">
            <StackPanel Visibility="{Binding IsUpdatingPlaylists,Converter={StaticResource visCon}}">
                <TextBlock Text="Updating..." HorizontalAlignment="Center"/>
                <ProgressBar IsIndeterminate="True" />
            </StackPanel>
        </Grid>

        <Grid Grid.Row="1"
              Visibility="{Binding IsLoaded,Converter={StaticResource visCon}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <con:MultipleInputs2Converter x:Name="micViewPlaylists"
                                          Input0="{Binding ElementName=atbPlaylists,Path=IsChecked}"
                                          Input1="{Binding Path=CurrentPlaylist.Id}"
                                          Convert="MicViewPlaylists_Convert"/>

            <Grid Grid.Row="0" Margin="5,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <TextBlock FontSize="25" FontWeight="SemiBold" VerticalAlignment="Center"
                           TextTrimming="CharacterEllipsis" Text="{Binding CurrentPlaylist.Name}"
                           Visibility="{Binding ElementName=micViewPlaylists,Path=Output,Converter={StaticResource hidCon}}"/>

                <TextBlock FontSize="25" FontWeight="SemiBold" Text="Playlists" VerticalAlignment="Center"
                           Visibility="{Binding ElementName=micViewPlaylists,Path=Output,Converter={StaticResource visCon}}"/>

                <ctl:IconButton Grid.Column="1" Margin="3" Click="IbnLoopType_Click"
                                Symbol="{Binding CurrentPlaylist.Loop,Converter={StaticResource loopIcoCon}}"
                                Visibility="{Binding CurrentPlaylist,Converter={StaticResource visCon}}"/>

                <ctl:IconButton Grid.Column="2" Margin="3" Click="IbnOrderType_Click"
                                Symbol="{Binding CurrentPlaylist.Shuffle,Converter={StaticResource shuffleIcoCon}}"
                                Visibility="{Binding CurrentPlaylist,Converter={StaticResource visCon}}"/>

                <ctl:IconButton Grid.Column="3" Symbol="Find" Margin="3" Click="IbnSearch_Click"/>
            </Grid>

            <Grid Grid.Row="1" Margin="10,0"
                  Visibility="{Binding IsClient,Converter={StaticResource visCon}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <TextBlock Text="Volume:" FontWeight="SemiBold" VerticalAlignment="Center" Margin="0,3,5,0"/>
                <Slider Grid.Column="1" VerticalAlignment="Center" Margin="0,0,0,-12" SnapsTo="StepValues"
                        StepFrequency="0.01" Maximum="1" Value="{Binding Volume,Mode=TwoWay}"
                        ThumbToolTipValueConverter="{StaticResource volTooTipCon}"/>
            </Grid>

            <con:MultipleInputs4Converter x:Name="micSongs" 
                                          Input0="{Binding CurrentPlaylist.Songs}" 
                                          Input1="{Binding CurrentPlaylist.CurrentSong}" 
                                          Input2="{Binding CurrentPlaylist.RequestedSong,Mode=TwoWay}" 
                                          Input3="{StaticResource negativeOne}"
                                          ConvertRef="MicCurrentSongIndex_ConvertRef"/>

            <con:MultipleInputs2Converter x:Name="micDoRemove" 
                                          Input1="{Binding CurrentPlaylist.Type}"
                                          Convert="MicDoRemove_Convert"/>

            <ListBox Grid.Row="2" x:Name="lbxSongs" Margin="0,5" HorizontalAlignment="Stretch"
                     ItemsSource="{Binding ElementName=micSongs,Path=Output}"
                     SelectedIndex="{Binding ElementName=micSongs,Path=Input3,Mode=TwoWay}"
                     SelectionChanged="LbxSongs_SelectionChanged">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid Margin="0,-8">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.RowSpan="2" TextAlignment="Center" Margin="5,0,10,0"
                                       VerticalAlignment="Center" Text="{Binding Index}"
                                       Visibility="{Binding ElementName=atbViewIndex,Path=IsChecked,Converter={StaticResource visCon}}"/>

                            <TextBlock Grid.Column="1" Grid.Row="0" Text="{Binding Title}"/>
                            <TextBlock Grid.Column="1" Grid.Row="1" FontStyle="Italic"
                                       Text="{Binding Artist,TargetNullValue=&lt;Unkown&gt;}"/>

                            <ctl:IconButton Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Click="IbnRemove_Click"
                                            Symbol="Remove" Visibility="{Binding ElementName=micDoRemove,
                                              Path=Output,Converter={StaticResource visCon}}"/>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>

            <Grid Grid.Row="2"
                  Visibility="{Binding ElementName=micViewPlaylists,Path=Output,Converter={StaticResource visCon}}">
                <ListBox x:Name="lbxPlaylists" Margin="0,5" SelectionMode="Single"
                         ItemsSource="{Binding Playlists}"
                         SelectedIndex="{Binding CurrentPlaylistIndex,Mode=TwoWay}"
                         SelectionChanged="LbxPlaylists_SelectionChanged">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid Holding="GidPlaylistItem_Holding" RightTapped="GidPlaylistItem_RightTapped">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                
                                <con:MultipleInputs2Converter x:Name="micPlaylistUpdateable" Input0="{Binding Type}" 
                                                              Input1="{Binding ElementName=sicIsClient,Path=Output}"
                                                              Convert="MicPlaylistUpdateable_Convert"/>

                                <TextBlock FontWeight="SemiBold" FontSize="17"
                                           TextWrapping="WrapWholeWords" Text="{Binding Name}"/>

                                <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                                    <TextBlock Text="{Binding SongsCount}"/>
                                    <TextBlock Text=" Song(s)"/>
                                </StackPanel>

                                <FlyoutBase.AttachedFlyout>
                                    <MenuFlyout>
                                        <MenuFlyoutItem Text="Update songs" Icon="Refresh" Click="MfiUpdateSongs_Click"
                                                        IsEnabled="{Binding ElementName=sicIsUpdating,Path=Output,Converter={StaticResource invertCon}}"
                                                        Visibility="{Binding ElementName=micPlaylistUpdateable,Path=Output,Converter={StaticResource visCon}}"/>
                                        <MenuFlyoutItem Text="Reload songs" Icon="Refresh" Click="MfiReloadSongs_Click"
                                                        IsEnabled="{Binding ElementName=sicIsUpdating,Path=Output,Converter={StaticResource invertCon}}"
                                                        Visibility="{Binding ElementName=micPlaylistUpdateable,Path=Output,Converter={StaticResource visCon}}"/>
                                        <MenuFlyoutSeparator Visibility="{Binding ElementName=micPlaylistUpdateable,Path=Output,Converter={StaticResource visCon}}"/>
                                        <MenuFlyoutItem Text="Remix songs" Icon="Shuffle" Click="MfiRemixSongs_Click"
                                                        IsEnabled="{Binding ElementName=sicIsUpdating,Path=Output,Converter={StaticResource invertCon}}"/>
                                        <MenuFlyoutItem Text="Remove" Icon="Delete" Click="MfiRemovePlaylist_Click"
                                                        IsEnabled="{Binding ElementName=sicIsUpdating,Path=Output,Converter={StaticResource invertCon}}"/>
                                    </MenuFlyout>
                                </FlyoutBase.AttachedFlyout>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <Grid Visibility="{Binding Path=Playlists.Count,Converter={StaticResource hidCon}}">
                    <StackPanel VerticalAlignment="Center"
                                Visibility="{Binding ElementName=sicIsUpdating,Path=Output,Converter={StaticResource visCon}}">
                        <TextBlock Text="Updating..." Margin="5" HorizontalAlignment="Center"
                                   FontSize="20" FontWeight="SemiBold"/>
                        <ProgressRing Width="100" Height="100" IsActive="True" />
                    </StackPanel>
                </Grid>

                <Grid Visibility="{Binding Path=Playlists.Count,Converter={StaticResource hidCon}}">
                    <TextBlock Text="&lt;No Playlists&gt;" HorizontalAlignment="Center"
                               Margin="10" FontStyle="Italic" FontSize="20" FontWeight="SemiBold"
                               Visibility="{Binding ElementName=sicIsUpdating,Path=Output,Converter={StaticResource hidCon}}"/>
                </Grid>
            </Grid>


            <Grid Grid.Row="3" Margin="5,1" DataContext="{Binding CurrentPlaylist}"
                  Visibility="{Binding Path=Id,Converter={StaticResource visCon},
                      FallbackValue={StaticResource collapsed}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <StackPanel DataContext="{Binding Path=CurrentSong}"
                            Tapped="SplCurrentSong_Tapped">
                    <TextBlock Text="{Binding Title}" Margin="1" FontWeight="SemiBold" TextWrapping="Wrap"
                               Visibility="{Binding Title,Converter={StaticResource visCon}}"/>
                    <TextBlock Text="{Binding Artist}" Margin="1" FontStyle="Italic" TextWrapping="Wrap"
                               Visibility="{Binding Artist,Converter={StaticResource visCon}}"/>
                </StackPanel>

                <StackPanel Grid.ColumnSpan="2" Orientation="Horizontal"
                            HorizontalAlignment="Right" VerticalAlignment="Center"
                            Tapped="SplPlaybackRate_Tapped">
                    <TextBlock Text="{Binding PlaybackRate,FallbackValue=1}" />
                    <TextBlock Text="x" />
                </StackPanel>
            </Grid>

            <local:AudioPositionSlider Grid.Row="4" Position="{Binding CurrentPlaylist.Position}"
                                       Duration="{Binding CurrentPlaylist.Duration}"
                                       Visibility="{Binding CurrentPlaylist.Id,Converter={StaticResource visCon}}"
                                       UserPositionChanged="AudioPositionSlider_UserPositionChanged"/>
        </Grid>

        <StackPanel Grid.Row="1" VerticalAlignment="Center"
                    Visibility="{Binding IsLoaded,Converter={StaticResource hidCon}}">
            <ProgressRing Grid.Row="1" IsActive="True" Height="100" Width="100" Margin="10"/>
            <Button Grid.Row="2" Content="Settings" Width="100" Margin="5"
                    HorizontalAlignment="Center" Click="BtnSettings_Click"/>
        </StackPanel>
    </Grid>

    <Page.BottomAppBar>
        <CommandBar Visibility="{Binding IsLoaded,Converter={StaticResource visCon}}">
            <CommandBar.PrimaryCommands>
                <AppBarToggleButton x:Name="atbPlaylists" Icon="List" Label="Playlists"/>
                <AppBarButton Icon="Previous" Label="Previous" Click="AbbPrevious_Click"/>
                <AppBarButton Label="{Binding PlayState,Converter={StaticResource isPlayPauseLabelCon}}"
                              Click="AbbPlayPause_Click">
                    <AppBarButton.Icon>
                        <SymbolIcon Symbol="{Binding PlayState,Converter={StaticResource isPlayPauseIconCon}}"/>
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton Icon="Next" Label="Next" Click="AbbNext_Click"/>
            </CommandBar.PrimaryCommands>

            <CommandBar.SecondaryCommands>
                <AppBarButton Label="Update playlists and songs" Icon="Refresh"
                              IsEnabled="{Binding IsUpdatingPlaylists,Converter={StaticResource invertCon}}"
                              Visibility="{Binding IsClient,Converter={StaticResource hidCon}}"
                              Click="AbbUpdatePlaylistsAndSongs_Click"/>
                <AppBarButton Label="Reload playlists and songs" Icon="Refresh"
                              IsEnabled="{Binding IsUpdatingPlaylists,Converter={StaticResource invertCon}}"
                              Visibility="{Binding IsClient,Converter={StaticResource hidCon}}"
                              Click="AbbUReloadPlaylistsAndSongs_Click"/>
                <AppBarSeparator Visibility="{Binding IsClient,Converter={StaticResource hidCon}}" />
                <AppBarToggleButton x:Name="atbViewIndex" Icon="List" Label="Index"/>
                <AppBarButton Icon="Setting" Label="All settings" Click="AbbSettings_Click"/>
                <AppBarButton Icon="Admin" Label="Debug" Click="AbbDebug_Click"/>
            </CommandBar.SecondaryCommands>
        </CommandBar>
    </Page.BottomAppBar>
</Page>
